{"version":3,"sources":["components/topic/Topic.js","components/header/Header.js","api/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Item","styled","div","props","getCss","score","Img","img","Details","DetailsFooter","DetailsHeader","Upvotes","Author","Title","vistPost","permalink","window","open","Topic","posts","author","num_comments","title","ups","url","rank","onClick","alt","src","onError","e","target","onerror","NavHeader","Header","fetchData","a","fetch","then","response","json","data","children","length","error","Error","message","catch","Conatiner","sortPostDes","sort","b","Home","useState","setPosts","useEffect","redditPosts","sortedPosts","map","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1a110d3b.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled,  {css} from 'styled-components';\r\n\r\nconst redditUrl = \"https://www.reddit.com/\";\r\n\r\n//styled compnents for Topic.js \r\nconst Item = styled.div`\r\n      margin: 10px;\r\n      border-radius: 10px;\r\n      box-shadow: 0px 5px 20px 0px #000000a6;\r\n      background: ${props => (getCss(props.score))}\r\n      `;\r\nconst Img = styled.img`\r\n      border-radius: 10px 10px 0px 0px;\r\n      width: 300px;\r\n      height: 300px;`;\r\nconst Details = styled.div`\r\n      opacity: 0.5;\r\n      padding: 5px 10px;\r\n      color: #0a1603;\r\n      display:flex;\r\n      gap: 20px;\r\n      flex-direction: column;`;\r\nconst DetailsFooter = styled.div` \r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: stretch;`;\r\nconst DetailsHeader = styled.div` \r\n      display: flex;\r\n      flex-direction: row;`;\r\nconst Upvotes = styled.div`margin-left: auto;`;\r\n\r\nconst getCss = (score) => {\r\n  return score % 2 ? 'linear-gradient(#F5B041, #EB984E)' : 'linear-gradient(#7FB3D5, #85C1E9)';\r\n}\r\nconst Author = styled.div`margin-left: auto;`;\r\nconst Title = styled.div` \r\n      height: 25px;\r\n      max-width: 280px;`;\r\n\r\nconst vistPost = (permalink) => {\r\n  window.open(`${redditUrl}${permalink}`, '_blank');\r\n}\r\n\r\nexport default function Topic({ posts: { author, num_comments, title, permalink, ups, url, score }, rank }) {\r\n  return (\r\n    <Item score={score} onClick={() => vistPost(permalink)}>\r\n      <Img alt=\"tumbnail\" src={url} onError={(e) => { e.target.onerror = null; e.target.src = \"/images/snoo.jpg\" }} />\r\n      <Details>\r\n        <DetailsHeader>\r\n          <div>#{rank + 1}</div>\r\n          <Author>{author}</Author>\r\n        </DetailsHeader>\r\n        <Title onClick={() => vistPost(permalink)}>{title}</Title>\r\n        <DetailsFooter>\r\n          <span>{num_comments} comments</span>\r\n          <Upvotes>{ups} ups</Upvotes>\r\n        </DetailsFooter>\r\n      </Details>\r\n    </Item>\r\n\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst NavHeader = styled.div`position: fixed;\r\n    display: flex;\r\n    justify-content: center;\r\n    text-align: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    z-index: 100;\r\n    left: 0;\r\n    right: 0;\r\n    background-color: white;\r\n    background-image: url('/images/bg-header.png');\r\n`;\r\n\r\nexport default function Header() {\r\n    return (\r\n        <NavHeader>\r\n            <h1>Top 20 topics for \"/r/ProgrammerHumor\"</h1>\r\n        </NavHeader>\r\n    );\r\n}\r\n\r\n","import fetch from 'cross-fetch';\r\n\r\nconst url = 'https://www.reddit.com/r/ProgrammerHumor/top.json?limit=20';\r\n\r\nexport const fetchData = async () => {\r\n    return fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n           return (response?.data?.children?.length) ?\r\n                response.data.children : [];\r\n        }, (error) => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n        })\r\n        .catch(error => error.message);\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Topic from '../components/topic/Topic';\r\nimport Header from '../components/header/Header';\r\nimport { fetchData } from '../api';\r\nimport styled from 'styled-components';\r\n\r\nconst Conatiner = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    position: relative;\r\n    top:150px;\r\n`;\r\n\r\nconst sortPostDes = (posts) => {\r\n    const sortedPosts = posts.sort((a, b) => a.data.num_comments < b.data.num_comments ? 1 : -1);\r\n    return sortedPosts;\r\n}\r\n\r\nconst Home = () => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const redditPosts = await fetchData();\r\n            const sortedPosts = sortPostDes(redditPosts);\r\n            setPosts(sortedPosts);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Conatiner>\r\n                {posts.map((posts, rank) =>\r\n                    <Topic key={rank} posts={posts.data} rank={rank} />\r\n                )}\r\n            </Conatiner>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}